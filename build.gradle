plugins {
    id "application"
}

ext {
    lombokVersion = '1.18.16'
    jvmVersion = JavaVersion.VERSION_14
}

description = "Protop CLI"

allprojects {
    group = "io.protop"
    version = "0.8.0"

    apply plugin: "java"

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

java {
    sourceCompatibility = jvmVersion
    targetCompatibility = jvmVersion
}

subprojects {
    dependencies {
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"

        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'com.google.guava:guava:27.0.1-jre'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9.3'
        implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
        implementation 'commons-io:commons-io:2.6'
        implementation 'io.reactivex.rxjava2:rxjava:2.2.17'
        implementation 'javax.validation:validation-api:2.0.1.Final'

        testImplementation 'org.assertj:assertj-core:3.+'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.+'
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(org.gradle.api.tasks.javadoc.Javadoc).all { enabled = false }
}

dependencies {
    implementation project(":protop-cli")
}

def DIST_NAME = "protop-${project.version}"
def DIST_JAR_NAME = "protop.jar"
def MANIFEST_NAME = "MANIFEST.MF"

task distFatJar(type: Jar) {
    description = 'Assembles a jar archive containing all dependencies.'
    group = 'Distribution'

    archiveFileName = DIST_JAR_NAME

    manifest {
        attributes (
                'Protop-Version' : project.version,
                'Built-By'       : System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'      : "${System.properties['java.version']}",
                "Main-Class"     : "io.protop.cli.ProtopCli"
        )
    }

    from sourceSets.main.output

    // Do the rest of this task as such because https://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
    doFirst {

        from configurations.runtimeClasspath.
                findAll { it.name.endsWith('jar') }.
                collect { zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

tasks.register('executable') {
    description = 'Assembles an executable from the fat jar.'
    group = 'Build'

    dependsOn distFatJar

    final outputFile = file("${buildDir}/bin/protop")

    inputs.files tasks.distFatJar.outputs.files.getSingleFile()
    outputs.file outputFile

    doFirst {
        mkdir outputFile.getParent()
    }

    doLast {
        outputFile.text = '#!/bin/bash\n'
        outputFile.append('exec java -jar "$0" "$@"\n')
        outputFile.append(inputs.files.first().readBytes())
        outputFile.setExecutable(true)
    }
}

plugins.withType(DistributionPlugin) {
    distZip {
        archiveFileName = "${DIST_NAME}.zip"

        if (!project.hasProperty("dev")) {
            include(DIST_JAR_NAME)
            include(MANIFEST_NAME)
        }
    }
    distTar {
        compression = Compression.GZIP
        archiveFileName = "${DIST_NAME}.tgz"

        if (!project.hasProperty("dev")) {
            include(DIST_JAR_NAME)
            include(MANIFEST_NAME)
        }
    }
}

distributions {
    main {
        contents {
            from distFatJar
        }
    }
}

mainClassName = "io.protop.cli.ProtopCli"
